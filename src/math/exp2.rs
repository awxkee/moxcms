/*
 * // Copyright (c) Radzivon Bartoshyk 4/2025. All rights reserved.
 * //
 * // Redistribution and use in source and binary forms, with or without modification,
 * // are permitted provided that the following conditions are met:
 * //
 * // 1.  Redistributions of source code must retain the above copyright notice, this
 * // list of conditions and the following disclaimer.
 * //
 * // 2.  Redistributions in binary form must reproduce the above copyright notice,
 * // this list of conditions and the following disclaimer in the documentation
 * // and/or other materials provided with the distribution.
 * //
 * // 3.  Neither the name of the copyright holder nor the names of its
 * // contributors may be used to endorse or promote products derived from
 * // this software without specific prior written permission.
 * //
 * // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * // DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
 * // FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
 * // DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 * // SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 * // CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
 * // OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
use crate::math::common::*;
#[cfg(not(any(
    all(
        any(target_arch = "x86", target_arch = "x86_64"),
        target_feature = "fma"
    ),
    all(target_arch = "aarch64", target_feature = "neon")
)))]
use crate::math::estrin::*;

#[inline]
pub fn f_exp2(d: f64) -> f64 {
    const TBLSIZE: usize = 256;
    #[rustfmt::skip]
    const EXP2FT: [f64; TBLSIZE] = [0.7071067811865476, 0.7090239421602076, 0.7109463010845828, 0.7128738720527471, 0.714806669195985, 0.7167447066838945, 0.7186879987244912, 0.7206365595643128, 0.7225904034885233, 0.7245495448210175, 0.7265139979245263, 0.7284837772007219, 0.7304588970903235, 0.7324393720732029, 0.7344252166684909, 0.7364164454346838, 0.7384130729697497, 0.7404151139112359, 0.7424225829363762, 0.7444354947621985, 0.7464538641456324, 0.7484777058836177, 0.7505070348132128, 0.7525418658117032, 0.7545822137967114, 0.7566280937263049, 0.7586795205991074, 0.7607365094544073, 0.7627990753722692, 0.7648672334736435, 0.766940998920478, 0.7690203869158284, 0.7711054127039704, 0.7731960915705107, 0.7752924388425, 0.7773944698885443, 0.7795022001189185, 0.7816156449856788, 0.7837348199827765, 0.7858597406461707, 0.7879904225539432, 0.7901268813264123, 0.7922691326262469, 0.794417192158582, 0.7965710756711335, 0.7987307989543135, 0.8008963778413467, 0.8030678282083855, 0.8052451659746271, 0.8074284071024304, 0.8096175675974319, 0.8118126635086644, 0.8140137109286739, 0.8162207259936375, 0.8184337248834822, 0.8206527238220032, 0.8228777390769825, 0.8251087869603089, 0.8273458838280972, 0.8295890460808081, 0.8318382901633682, 0.8340936325652912, 0.8363550898207983, 0.8386226785089392, 0.8408964152537145, 0.8431763167241967, 0.8454623996346526, 0.8477546807446663, 0.8500531768592617, 0.8523579048290256, 0.8546688815502315, 0.856986123964963, 0.859309649061239, 0.861639473873137, 0.8639756154809188, 0.8663180910111555, 0.8686669176368531, 0.8710221125775782, 0.8733836930995845, 0.8757516765159391, 0.8781260801866497, 0.880506921518792, 0.8828942179666364, 0.8852879870317774, 0.8876882462632606, 0.8900950132577122, 0.8925083056594675, 0.8949281411607005, 0.8973545375015536, 0.8997875124702676, 0.902227083903312, 0.904673269685516, 0.9071260877501994, 0.9095855560793042, 0.9120516927035267, 0.9145245157024486, 0.9170040432046712, 0.9194902933879469, 0.921983284479313, 0.9244830347552254, 0.9269895625416927, 0.9295028862144102, 0.9320230241988945, 0.9345499949706193, 0.93708381705515, 0.9396245090282801, 0.9421720895161673, 0.9447265771954696, 0.9472879907934828, 0.9498563490882777, 0.9524316709088371, 0.9550139751351949, 0.9576032806985737, 0.9601996065815237, 0.9628029718180625, 0.9654133954938136, 0.9680308967461472, 0.9706554947643202, 0.9732872087896166, 0.9759260581154892, 0.9785720620877001, 0.9812252401044637, 0.9838856116165879, 0.9865531961276172, 0.9892280131939755, 0.9919100824251097, 0.9945994234836332, 0.9972960560854701, 1.0, 1.0027112750502025, 1.0054299011128027, 1.0081558981184175, 1.0108892860517005, 1.0136300849514894, 1.016378314910953, 1.019133996077738, 1.0218971486541166, 1.0246677928971357, 1.0274459491187637, 1.030231637686041, 1.0330248790212284, 1.0358256936019572, 1.0386341019613787, 1.041450124688316, 1.0442737824274138, 1.0471050958792898, 1.0499440858006872, 1.0527907730046264, 1.0556451783605572, 1.0585073227945128, 1.061377227289262, 1.0642549128844645, 1.0671404006768237, 1.0700337118202419, 1.0729348675259756, 1.075843889062791, 1.0787607977571199, 1.0816856149932152, 1.0846183622133092, 1.0875590609177697, 1.0905077326652577, 1.0934643990728858, 1.0964290818163769, 1.099401802630222, 1.102382583307841, 1.1053714457017412, 1.1083684117236787, 1.1113735033448175, 1.1143867425958924, 1.1174081515673693, 1.1204377524096067, 1.12347556733302, 1.1265216186082418, 1.129575928566288, 1.1326385195987192, 1.1357094141578055, 1.1387886347566916, 1.1418762039695616, 1.1449721444318042, 1.148076478840179, 1.1511892299529827, 1.154310420590216, 1.1574400736337511, 1.1605782120274988, 1.1637248587775775, 1.1668800369524817, 1.1700437696832502, 1.1732160801636373, 1.1763969916502812, 1.1795865274628758, 1.182784710984341, 1.1859915656609938, 1.189207115002721, 1.1924313825831512, 1.1956643920398273, 1.1989061670743806, 1.202156731452703, 1.2054161090051239, 1.2086843236265816, 1.2119613992768012, 1.215247359980469, 1.2185422298274085, 1.2218460329727576, 1.2251587936371455, 1.22848053610687, 1.2318112847340759, 1.2351510639369334, 1.2384998981998165, 1.241857812073484, 1.245224830175258, 1.2486009771892048, 1.2519862778663162, 1.255380757024691, 1.2587844395497165, 1.2621973503942507, 1.2656195145788063, 1.2690509571917332, 1.2724917033894028, 1.275941778396392, 1.2794012075056693, 1.2828700160787783, 1.2863482295460256, 1.2898358734066657, 1.2933329732290895, 1.2968395546510096, 1.3003556433796506, 1.3038812651919358, 1.3074164459346773, 1.3109612115247644, 1.3145155879493546, 1.318079601266064, 1.3216532776031575, 1.3252366431597413, 1.3288297242059544, 1.3324325470831615, 1.3360451382041458, 1.339667524053303, 1.3432997311868353, 1.3469417862329458, 1.3505937158920345, 1.3542555469368927, 1.3579273062129011, 1.3616090206382248, 1.365300717204012, 1.3690024229745905, 1.3727141650876684, 1.3764359707545302, 1.380167867260238, 1.383909881963832, 1.387662042298529, 1.3914243757719262, 1.3951969099662003, 1.3989796725383112, 1.4027726912202048, 1.4065759938190154, 1.4103896082172707];
    let redux = f64::from_bits(0x4338000000000000) / TBLSIZE as f64;

    let ui = f64::to_bits(d + redux);
    let mut i0 = ui;
    i0 += TBLSIZE as u64 / 2;
    let k = i0 / TBLSIZE as u64;
    i0 &= TBLSIZE as u64 - 1;
    let mut uf = f64::from_bits(ui);
    uf -= redux;
    let f: f64 = d - uf;

    let z: f64 = EXP2FT[i0 as usize];

    #[cfg(any(
        all(
            any(target_arch = "x86", target_arch = "x86_64"),
            target_feature = "fma"
        ),
        all(target_arch = "aarch64", target_feature = "neon")
    ))]
    {
        let mut u = 0.0096181291080346017;
        u = f_fmla(u, f, 0.055504108664458832);
        u = f_fmla(u, f, 0.24022650695908768);
        u = f_fmla(u, f, 0.69314718055994973);
        u = f_fmla(u, f, 1.);

        let i2 = pow2i(k as i32);
        u * i2 * z
    }
    #[cfg(not(any(
        all(
            any(target_arch = "x86", target_arch = "x86_64"),
            target_feature = "fma"
        ),
        all(target_arch = "aarch64", target_feature = "neon")
    )))]
    {
        let x2 = f * f;
        let x4 = x2 * x2;
        let u = poly5!(
            f,
            x2,
            x4,
            0.0096181291080346017,
            0.055504108664458832,
            0.24022650695908768,
            0.69314718055994973,
            1.
        );
        let i2 = pow2i(k as i32);
        u * i2 * z
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_exp2d() {
        let mut max_diff = f64::MIN;
        let mut max_away = 0;
        for i in -10000..10000 {
            let my_expf = f_exp2(i as f64 / 1000.);
            let system = (i as f64 / 1000.).exp2();
            max_diff = max_diff.max((my_expf - system).abs());
            max_away = (my_expf.to_bits() as i64 - system.to_bits() as i64)
                .abs()
                .max(max_away);
        }
        println!("{} max away {}", max_diff, max_away);
        assert!((f_exp2(0.35f64) - 0.35f64.exp2()).abs() < 1e-8);
        assert!((f_exp2(-0.6f64) - (-0.6f64).exp2()).abs() < 1e-8);
    }
}
